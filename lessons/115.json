[
  {
    "title": "ES6 - Mutate an Array Declared with const",
    "content": [
      "The const declaration has many use cases in modern JavaScript",
      "Some developers prefer to assign all their variables using const by default, unless they know they will need to reassign the value. Only in that case, they use let.",
      "However,  it is important to understand that objects (including arrays and functions) assigned to a variable using const are still mutable. Using the const declaration only prevents reassignment of the variable identifier.",
      "const s = [5, 6, 7];",
      "s = [1, 2, 3];",
      "s[2] = 45;",
      "console.log(s);",
      "s = [1, 2, 3] will result in an error. After commenting out that line, the console.log will display the value [5, 6, 45].",
      "As you can see, you can mutate the object [5, 6, 7] itself and the variable s will still point to the alterated array [5, 6, 45]. Like all arrays, the array elements in s are mutable, but becasuse const was used, you cannot use the variable identifier s to point to a different array using the assignment operator."
    ],
    "eTitle": "Exercise",
    "exercises": [
      {
        "instruction": [
          "An array is declared as const s = [5, 7, 2]. Change the array to [2, 5, 7] using various element assignments."
        ],
        "placeholder": [
          "// Setup",
          "function checkScope() {",
          "var i = 'function scope';",
          "if (true) {",
          "i = 'block scope';",
          "console.log('Block scope i is : ', i);",
          "}",
          "console.log('Function scope i  is ', i);",
          "return i;",
          "}"
        ]
      }
    ],
    "hint": [
      "Hint! ",
      "you should not replace const keyword.",
      "s should not change the original array declaration.",
      "You should not change the original array declaration.",
      "s should equal to [2, 5, 7]"
    ]
  }
]
