[
  {
    "title": "ES6 - Complete a Promise with resolve and reject",
    "content": [
      "A promise has three states: pending. fulfielded and rejected. The promise you created in the last challenge is forever stuck in the pending state because you did not add a way to complete the promise. The resolve and reject parameters given to the promise argument are used to do this. resolve is used when you want your promise to succed, and reject is used when you want it to fail. These are methods that take an argument, as seen below. ",
      "const myPromise = new Promise ((resolve, reject ) => {",
      "if (condition here) {",
      "resolve ('Promise was fulfielded');",
      "} else {",
      "reject ('Promise was rejected');",
      "}",
      "})",
      "The example above uses stringd for the argument of these fuctions, but it can really be anything. Often, it might be an object, that you would use data from, to put your website or elsewhere."
    ],
    "eTitle": "Exercise",
    "exercises": [
      {
        "instruction": [
          "Make the promise handle success and failure. If responseFromServer os true, call the resolve method to successfully complete the promise. Pass resolve a string with the value 'We got the data'. If responseFromServer is false, use the reject method instead and pass it to the string: Data not received."
        ],
        "placeholder": [
          "// Setup",
          "const makeServerRequest = new Promise ((resolve, reject) => {",
          "//responseFromServer represents a response from a server",
          "let responseFromServer; ",
          "if (responseFromServer) {",
          "//Change this line",
          " } else {",
          "//Change this line",
          "}",
          "});"
        ]
      }
    ],
    "hint": [
      " Hint! ",
      " resolve should be called with the expected string when the if condition is true.",
      " reject should be called with the expected string when the if conditon is false."
    ]
  }
]
