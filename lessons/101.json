[
  {
    "title": "Nesting For Loops",
    "content": [
      "If you have a multi-dimensional array, you can use the same logic as prior waypoint to loop through both the arrays and any sub-array. Here is an example:",
      "const arr = [",
      "[1, 2], [3, 4], [5, 6]",
      "];",
      "our array.push(i);",
      "];",
      "for ( let i = 0; i < arr.length; i++) {",
      "for (let j = 0; j < arr[i].length; j++) {",
      "console.log(arr[i][j]);",
      "}",
      "}",
      "",
      "This outputs each sub-element in arr one at a time. Note that for thw inner loop, we are checking the .length of arr[i] since arr[i] is itself an array "
    ],
    "eTitle": "Exercise",
    "exercises": [
      {
        "instruction": "Modify function multiplyAll so that returns the product of all the numbers in the sub-arrays of arr.",
        "placeholder": [
          "// Setup",
          "",
          "function multiplyAll(arr){",
          "let product = 1;",
          "// Only change code below this line",
          "",
          "// Only change code above this line",
          "return product;",
          "}",
          "",
          "multiplyAll([[1, 2], [3, 4], [5, 6, 7]])"
        ]
      }
    ],
    "hint": [
      "Hint! ",
      "multiplyAll([[1], [2], [3]]) should return 6",
      "multiplyAll([[1,2], [3. 4]. [5, 6, 7]]) should return 5040",
      "multiplyAll([[5, 1], [0.2, 4, 0.5], [3, 9]]) should return 54"
    ]
  }
]
