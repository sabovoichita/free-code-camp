[
  {
    "title": "ES6 - Compare Scopes of the var and let Keywords",
    "content": [
      "When we declare a variable with var keyword, it is declared globally, or locally if declared inside a function.",
      "The let keywords behaves similarly, but with some extra features. When you declare a variable with the let keyword inside a block, statement, or expressionm its scope is limited to that block, statement, or expression.",
      "For example:",
      "var numArray = [];",
      "for (var i = 0; i < 3; i++) {",
      "numArray.push(i);",
      "}",
      "console.log(numArray);",
      "console.log(i);",
      "Here the console will display the values [0, 1, 2] and 3",
      "This behaviour will case problems if we were to create a function and store it for later use inside a for loop that uses the i variable. This is because the stored function will always refer to the value of the updated global i variable.",
      "var printNumTwo;",
      "for (var i = 0; i < 3; i++) {",
      "if (i === 2) {",
      "printNumTwo = function() {",
      "return i;",
      "};",
      "}",
      "}",
      "console.log(printNumTwo());",
      "Here the console will display the value 3.",
      "As you can see, printNumTwo() prints 3 and not 2. This is because the value assigned to i has been updated and the printNumTwo() returns the global i and not the value i had when the function was created in the for loop. The let keyword does not follow this behaviour:",
      "let printNumTwo;",
      "for (var i = 0; i < 3; i++) {",
      "if (i === 2) {",
      "printNumTwo = function() {",
      "return i;",
      "};",
      "}",
      "}",
      "console.log(printNumTwo());",
      "Here the console will display the value 2, and an error that i is not defined.",
      "i is not defined because it was not declared in the global scope. It is only declared within the for loop statement. printNumTwo() returned the correct value because three different i variables with unique values (0, 1 and 2) were created by the let keyword within the loop statement."
    ],
    "eTitle": "Exercise",
    "exercises": [
      {
        "instruction": [
          "Fix the code so that i declared in the if statement is a separate variable than i declared in the first line of the function. Be certain not to use the var keyword anywhere in your code.",
          "This exercise is designed to illustrate the difference between how var and let keywords assign scope to the declared variable. When programming a function similar to the one used in this exercise, it is often better to use different variable names to avoid confusion."
        ],
        "placeholder": [
          "// Setup",
          "function checkScope() {",
          "var i = 'function scope';",
          "if (true) {",
          "i = 'block scope';",
          "console.log('Block scope i is : ', i);",
          "}",
          "console.log('Function scope i  is ', i);",
          "return i;",
          "}"
        ]
      }
    ],
    "hint": [
      "Hint! ",
      "var should not exist in code.",
      "The variable i declared in the if statement should equal the string block scope.",
      "checkScope() should return the string function scope"
    ]
  }
]
