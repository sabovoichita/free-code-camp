[
  {
    "title": "ES6 - Handle a Rejected Promise with catch",
    "content": [
      "catch is the method used when your promise has been rejected. It is executed immediately after a promise's reject method is called. Here's the syntax:",
      "myPromise.catch(error =>{",
      "});",
      "error is the argument passed in to the reject method."
    ],
    "eTitle": "Exercise",
    "exercises": [
      {
        "instruction": [
          "Add the catch method to your promise. Use error as the parameter of its callback function and log error to the console."
        ],
        "placeholder": [
          "// Setup",
          "const makeServerRequest = new Promise ((resolve, reject) => {",
          "//responseFromServer is set to false to represent a unsuccessful response from a server",
          "let responseFromServer = false; ",
          "if (responseFromServer) {",
          "resolve('We fot the data');",
          " } else {",
          "reject('Data not received')",
          "}",
          "});",
          "makeServerRequest.then(result => ",
          "console.log(result)",
          "});"
        ]
      }
    ],
    "hint": [
      " Hint! ",
      " You should call the catch method on the promise. ",
      " Ypur catch method should have callback function with error as its parameter",
      "You should log error result to the console"
    ]
  }
]
